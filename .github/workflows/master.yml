# This workflow will do a clean install of node dependencies, build the source code and run tests
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Master

on:
  push:
    branches: [master]

defaults:
  run:
    shell: bash

jobs:
  test-build-deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            nx:
              - 'apps/**'
              - 'libs/**'
              - 'tools/**'
              - 'tsconfig*'
              - 'nx.json'
              - 'angular.json'
              - 'package.json'
              - 'jest*'
              - '.eslint*'
              - '.prettier*'
              - '.protolint.yaml'
              - '.stylelint*'
            mobile:
              - 'android/**'
              - 'capacitor.config.json'
            devops:
              - '.devops/**'
              - '.github/**'
              - '.dockerignore'

      - name: Use Node.js ${{ matrix.node-version }}
        if: steps.changes.outputs.nx == 'true'
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Configure kernel (increase watchers)
        if: steps.changes.outputs.nx == 'true'
        run: echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p

      - name: Get yarn cache directory path and commit hash
        if: steps.changes.outputs.nx == 'true'
        id: get-variables
        run: echo "::set-output name=yarncachedir::$(yarn cache dir)"; echo "::set-output name=commitsha::$(echo ${GITHUB_SHA})"

      - name: Workspace cache (npm, yarn, nx, jest)
        if: steps.changes.outputs.nx == 'true'
        uses: actions/cache@v2
        id: workspace-cache # use this to check for `cache-hit` (`steps.workspace-cache.outputs.cache-hit != 'true'`)
        env:
          cache-name: workspace-cache
        with:
          path: |
            ~/.npm
            ${{ steps.get-variables.outputs.yarncachedir }}
            **/node_modules
            /tmp/nx
            /tmp/jest_rs
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-yarn-${{ hashFiles('**/yarn.lock') }}-workspace-${{ steps.get-variables.outputs.commitsha }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-yarn-${{ hashFiles('**/yarn.lock') }}-workspace-
            ${{ runner.os }}-node-${{ matrix.node-version }}-yarn-
            ${{ runner.os }}-

      - name: Install global dependencies
        if: steps.changes.outputs.nx == 'true'
        run: npm i -g typescript @angular/cli @nrwl/cli firebase-tools @compodoc/compodoc

      - name: Workspace integrity check
        if: steps.changes.outputs.nx == 'true'
        run: yarn workspace:integrity-check

      - name: Install project dependencies
        if: steps.changes.outputs.nx == 'true'
        run: yarn install --frozen-lockfile --ignore-scripts

      - name: Process dependencies with ngcc
        if: steps.changes.outputs.nx == 'true'
        run: yarn ngcc

      - name: Lint all
        if: steps.changes.outputs.nx == 'true'
        run: npx nx run-many --target=lint --all --parallel --maxParallel=2

      - name: Unit test all (with code coverage)
        if: steps.changes.outputs.nx == 'true'
        run: |
          npx nx run-many --target=test --all --passWithNoTests --code-coverage=true --watch=false --run-in-band --ci --updateSnapshot
          ng run tools:coverage-stats
          cat ./tools/ts/UNIT_COVERAGE.md

      - name: Set functions environment variables
        if: steps.changes.outputs.nx == 'true'
        run: bash tools/shell/set-portfolio-env.sh $GITHUB_ACCESS_TOKEN $MAILER_HOST $MAILER_PORT $MAILER_EMAIL $MAILER_CLIENT_ID $MAILER_CLIENT_SECRET $MAILER_REFRESH_TOKEN $MAILER_ACCESS_TOKEN $MAILER_RECIPIENT_EMAIL
        env:
          GITHUB_ACCESS_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
          MAILER_HOST: ${{ secrets.MAILER_HOST }}
          MAILER_PORT: ${{ secrets.MAILER_PORT }}
          MAILER_EMAIL: ${{ secrets.MAILER_EMAIL }}
          MAILER_CLIENT_ID: ${{ secrets.MAILER_CLIENT_ID }}
          MAILER_CLIENT_SECRET: ${{ secrets.MAILER_CLIENT_SECRET }}
          MAILER_REFRESH_TOKEN: ${{ secrets.MAILER_REFRESH_TOKEN }}
          MAILER_ACCESS_TOKEN: ${{ secrets.MAILER_ACCESS_TOKEN }}
          MAILER_RECIPIENT_EMAIL: ${{ secrets.MAILER_RECIPIENT_EMAIL }}

      - name: Build all (production)
        if: steps.changes.outputs.nx == 'true'
        run: npx nx run-many --target=build --all --configuration production

      - name: Deploy portfolio app
        if: steps.changes.outputs.nx == 'true'
        run: bash tools/shell/firebase-deploy.sh "$FIREBASE_DEPLOY_TOKEN" portfolio || exit 1
        env:
          FIREBASE_DEPLOY_TOKEN: ${{ secrets.FIREBASE_DEPLOY_TOKEN }}

      - name: Build documentation
        if: steps.changes.outputs.nx == 'true'
        run: |
          npx cypress install
          yarn build:documentation:prod

      - name: Deploy documentation app
        if: steps.changes.outputs.nx == 'true'
        run: bash tools/shell/firebase-deploy.sh "$FIREBASE_DEPLOY_TOKEN" documentation || exit 1
        env:
          FIREBASE_DEPLOY_TOKEN: ${{ secrets.FIREBASE_DEPLOY_TOKEN }}
